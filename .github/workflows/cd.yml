name: CD - Deploy to Azure App Service

on:
  push:
    branches:
      - main
      
permissions:
  id-token: write
  contents: read
  
jobs:
  build-publish-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repositÃ³rio
        uses: actions/checkout@v4

      - name: Instalar .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restaurar pacotes
        run: dotnet restore Core.PosTech8Nett/src/Core.PosTech8Nett.Api/Core.PosTech8Nett.Api.csproj

      - name: Compilar projeto
        run: dotnet build Core.PosTech8Nett/src/Core.PosTech8Nett.Api/Core.PosTech8Nett.Api.csproj --configuration Release --no-restore

      - name: Publicar projeto
        run: dotnet publish Core.PosTech8Nett/src/Core.PosTech8Nett.Api/Core.PosTech8Nett.Api.csproj -c Release -o ${{ github.workspace }}/publish
      
      - name: Instalar dotnet-ef CLI
        run: dotnet tool install --global dotnet-ef

      - name: Adicionar ferramentas globais ao PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Aplicar scripts de migraÃ§Ã£o
        run: dotnet ef database update --project Core.PosTech8Nett/src/Core.PosTech8Nett.Api/Core.PosTech8Nett.Api.csproj
        env:
          ConnectionStrings__DefaultConnection: ${{ secrets.CONNECTION_STRING }}
          
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_00CA1B0E042E43FC961DF1A6D82C97C8 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_4E6AD5A339E14C8C8EF96C0F09C47B7F }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_1DC92538FFDD4181A1958F5BB3D4E32F }}         
          
      - name: Login no Azure Container Registry (ACR)
        run: echo "${{ secrets.ACR_PASSWORD }}" | docker login acrinfiniteloops.azurecr.io -u ${{ secrets.ACR_USERNAME }} --password-stdin
        
      - name: Build da imagem
        run: docker build -t acrinfiniteloops.azurecr.io/core.postech8nett:latest -f Core.PosTech8Nett/src/Core.PosTech8Nett.Api/Dockerfile Core.PosTech8Nett

      - name: Push da imagem
        run: docker push acrinfiniteloops.azurecr.io/core.postech8nett:latest    
        
      - name: Implantar aplicativo no azure
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'InfiniteLoopsApp'
          slot-name: 'Production'
          images: acrinfiniteloops.azurecr.io/core.postech8nett:latest

      # - name: Notify Slack after deploy (descomente e configure o webhook)
      #   uses: slackapi/slack-github-action@v1.24.0
      #   with:
      #     payload: |
      #       {
      #         "text": "ðŸš€ Deploy concluÃ­do no Azure App Service: Fiap!"
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
